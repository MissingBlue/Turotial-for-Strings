@import url("./default.css");

.app-node {
	
	height: var(--app-height);
	
}

.app-node #logs {
	background: rgba(0,0,0,1);
	display: flex;
	height: 40%;
	width: 100%;
}

.logs-node {
	align-items: flex-end;
	display: flex;
	flex-direction: row-reverse;
	flex-wrap: nowrap;
	height: 100%;
	margin-right: 10%;
	overflow-x: auto;
}
.logs-container {
	border-radius: .4vmax;
	background: rgba(255,255,255,1);
	display: flex;
	margin: .5vmax;
	padding: 1vmax;
}

.dialog-node {
	
	display: flex;
	flex-direction: row-reverse;
	height: 100%;
	position: relative;
	
}
.dialog-node display-node {
	
	display: flex;
	height: 100%;
	position: absolute;
	width:100%;
	
}

.dialog-node display-node measure-box sprite-node [slot="sprite"] {
	
	/*--position-source-x-unit: -2250px;
	--position-source-y-unit: -10000px;
	--position-source-x: -2250;
	--position-source-y: -10000;*/
	--x-coefficient: calc(var(--sprite-size-width) / var(--img-sample-icon-width));
	--y-coefficient: calc(var(--sprite-size-height) / var(--img-sample-icon-height));
	
	--horizontal-w: clamp(400px, calc((var(--img-sample-icon-width) * var(--x-coefficient)) * (2.5px * var(--x-coefficient))), 600px);
	--horizontal-h: calc(var(--horizontal-w) * var(--img-sample-icon-height) / var(--img-sample-icon-width));
	/*--vertical-w: min(calc((var(--img-sample-icon-width) * var(--y-coefficient)) * (3px * var(--x-coefficient))), 600px);
	--vertical-h: calc(var(--vertical-w) * var(--img-sample-icon-height) / var(--img-sample-icon-width));
	--w: max(calc(var(--horizontal-w) * var(--sprite-horizontal)), calc(var(--vertical-w) * var(--sprite-vertical)));
	--h: max(calc(var(--horizontal-h) * var(--sprite-horizontal)), calc(var(--vertical-h) * var(--sprite-vertical)));*/
	--w: var(--horizontal-w);
	--h: var(--horizontal-h);
	--x: calc((var(--w) * var(--position-source-x) - var(--sprite-size-width-unit) / 2) * -1);
	--y: calc((var(--h) * var(--position-source-y) - var(--sprite-size-height-unit) / 2) * -1);
	
	background:	linear-gradient(transparent 50%, red 50.1%, red 51%, transparent 51.1%),
					no-repeat var(--x) var(--y)/var(--w) var(--h) var(--bg-url);
	height: 100%;
	left: var(--measured-x);
	position: absolute;
	top: 0;
	width: var(--measured-width);
	
}
.dialog-node display-node measure-box sprite-node [slot="sprite"].character-heat {
	
	--position-source-x: .5;
	--position-source-y: .2;
	--bg-url: url("../assets/images/sample-icon.png");
	
}
.dialog-node display-node measure-box sprite-node [slot="sprite"].character-17 {
	
	--position-source-x: .5;
	--position-source-y: .4;
	--bg-url: url("../assets/images/sample-icon-1.png");
	
}

.character-heat #resources {
	display: none;
}


.consoles-node {
	display: flex;
	width: 100%;
}

.console-node {
	display: flex;
	width: 100%;
}
.console-node #input-node {
	
	align-items: center;
	box-sizing: border-box;
	display: flex;
	flex: 1 0 auto;
	padding: .6vmax;
	
}
.console-node #inputform {
	
	font-size: 1.2rem;
	width: 100%;
	
}
.console-node #control-node {
	align-items: center;
	box-sizing: border-box;
	display: flex;
	padding: .6vmax;
}

.browser-node {
	display: flex;
	flex-direction: column;
	height: 100%;
}
.browser-node #view {
	flex: 1 0 auto;
}
.browser-node [slot="view"] {
	height: var(--content-height);
	/*
		iframe を包括する場合、高さを合わせても由来を特定できないスペースが生まれ、それが意図しないスクロールバーを発生させることがある。
		そのため、overflow: hidden; を設定して、その特定できないスペースを包括要素内に隠蔽している。
	*/
	overflow: hidden;
}
.browser-node [slot="view"] iframe {
	border: none;
	height: var(--content-height);
	width: 100%;
}

.browser-tab {
	
	align-items: center;
	display: flex;
	
}
.tab-content {
	display: none;
}
.tab-content.shown {
	display: block;
}

.s-p indexed-block {
	
	display: block;
	position: relative;
	
}
.s-p slot[name="content"] {
	
	display: block;
	
}
.s-p slot[name="content"].computed {
	
	height: var(--computed-static-height-unit);
	
}
.s-p ::slotted(pack-node) {
	
	--position: absolute;
	
	display: block;
	letter-spacing: -1px;
	position: relative;
	
}
.s-p .static ::slotted(pack-node) {
	
	--position: static;
	
}
.s-p ::slotted(pack-node.computed) {
	
	height: var(--computed-static-height-unit);
	width: var(--computed-static-width-unit);
	
}